/**
 * Swagger PetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { Order, orderSchema } from '../models/order';
import { bigint, dict, number } from '../schema';
import { BaseController } from './baseController';

export class StoreController extends BaseController {
  /**
   * Place an order for a pet
   *
   * @param body         order placed for purchasing the pet
   * @return Response from the API call
   */
  async placeOrder(
    body: Order,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('POST', '/store/order');
    const mapped = req.prepareArgs({ body: [body, orderSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Invalid Order');
    return req.callAsJson(orderSchema, requestOptions);
  }

  /**
   * For valid response try integer IDs with value >= 1 and <= 10. Other values will generated
   * exceptions
   *
   * @param orderId ID of pet that needs to be fetched
   * @return Response from the API call
   */
  async getOrderById(
    orderId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Order>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ orderId: [orderId, bigint()] });
    req.appendTemplatePath`/store/order/${mapped.orderId}`;
    req.throwOn(400, ApiError, 'Invalid ID supplied');
    req.throwOn(404, ApiError, 'Order not found');
    return req.callAsJson(orderSchema, requestOptions);
  }

  /**
   * For valid response try integer IDs with positive integer value. Negative or non-integer values will
   * generate API errors
   *
   * @param orderId ID of the order that needs to be deleted
   * @return Response from the API call
   */
  async deleteOrder(
    orderId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ orderId: [orderId, bigint()] });
    req.appendTemplatePath`/store/order/${mapped.orderId}`;
    req.throwOn(400, ApiError, 'Invalid ID supplied');
    req.throwOn(404, ApiError, 'Order not found');
    return req.call(requestOptions);
  }

  /**
   * Returns a map of status codes to quantities
   *
   * @return Response from the API call
   */
  async getInventory(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Record<string, number>>> {
    const req = this.createRequest('GET', '/store/inventory');
    return req.callAsJson(dict(number()), requestOptions);
  }
}
