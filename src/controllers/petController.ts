/**
 * Swagger PetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import { MApiResponse, mApiResponseSchema } from '../models/mApiResponse';
import { Pet, petSchema } from '../models/pet';
import { Status2Enum, status2EnumSchema } from '../models/status2Enum';
import { array, bigint, optional, string } from '../schema';
import { BaseController } from './baseController';

export class PetController extends BaseController {
  /**
   * uploads an image
   *
   * @param petId              ID of pet to update
   * @param additionalMetadata Additional data to pass to server
   * @param file               file to upload
   * @return Response from the API call
   */
  async uploadFile(
    petId: bigint,
    additionalMetadata?: string,
    file?: FileWrapper,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<MApiResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      petId: [petId, bigint()],
      additionalMetadata: [additionalMetadata, optional(string())],
    });
    req.formData({
      additionalMetadata: mapped.additionalMetadata,
      file: file,
    });
    req.appendTemplatePath`/pet/${mapped.petId}/uploadImage`;
    return req.callAsJson(mApiResponseSchema, requestOptions);
  }

  /**
   * Add a new pet to the store
   *
   * @param body         Pet object that needs to be added to the store
   * @return Response from the API call
   */
  async inpet(
    body: Pet,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/pet');
    const mapped = req.prepareArgs({ body: [body, petSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(405, ApiError, 'Invalid input');
    return req.call(requestOptions);
  }

  /**
   * Update an existing pet
   *
   * @param body         Pet object that needs to be added to the store
   * @return Response from the API call
   */
  async updateAnPet(
    body: Pet,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PUT', '/pet');
    const mapped = req.prepareArgs({ body: [body, petSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ApiError, 'Invalid ID supplied');
    req.throwOn(404, ApiError, 'Pet not found');
    req.throwOn(405, ApiError, 'Validation exception');
    return req.call(requestOptions);
  }

  /**
   * Multiple status values can be provided with comma separated strings
   *
   * @param status Status values that need to be considered for filter
   * @return Response from the API call
   */
  async findPetInTheStatus(
    status: Status2Enum[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Pet[]>> {
    const req = this.createRequest('GET', '/pet/findByStatus');
    const mapped = req.prepareArgs({
      status: [status, array(status2EnumSchema)],
    });
    req.query('status', mapped.status);
    req.throwOn(400, ApiError, 'Invalid status value');
    return req.callAsJson(array(petSchema), requestOptions);
  }

  /**
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   *
   * @param tags Tags to filter by
   * @return Response from the API call
   * @deprecated
   */
  async findPetsAnTags(
    tags: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Pet[]>> {
    const req = this.createRequest('GET', '/pet/findByTags');
    const mapped = req.prepareArgs({ tags: [tags, array(string())] });
    req.query('tags', mapped.tags);
    req.deprecated('PetController.findPetsAnTags');
    req.throwOn(400, ApiError, 'Invalid tag value');
    return req.callAsJson(array(petSchema), requestOptions);
  }

  /**
   * Returns a single pet
   *
   * @param petId ID of pet to return
   * @return Response from the API call
   */
  async getPetById(
    petId: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Pet>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ petId: [petId, bigint()] });
    req.appendTemplatePath`/pet/${mapped.petId}`;
    req.throwOn(400, ApiError, 'Invalid ID supplied');
    req.throwOn(404, ApiError, 'Pet not found');
    return req.callAsJson(petSchema, requestOptions);
  }

  /**
   * Updates a pet in the store with form data
   *
   * @param petId        ID of pet that needs to be updated
   * @param name         Updated name of the pet
   * @param status       Updated status of the pet
   * @return Response from the API call
   */
  async updatePetWithForm(
    petId: bigint,
    name?: string,
    status?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      petId: [petId, bigint()],
      name: [name, optional(string())],
      status: [status, optional(string())],
    });
    req.header('Content-Type', 'application/x-www-form-urlencoded');
    req.form({
      name: mapped.name,
      status: mapped.status,
    });
    req.appendTemplatePath`/pet/${mapped.petId}`;
    req.throwOn(405, ApiError, 'Invalid input');
    return req.call(requestOptions);
  }

  /**
   * Deletes a pet
   *
   * @param petId   Pet id to delete
   * @param apiKey
   * @return Response from the API call
   */
  async deletePet(
    petId: bigint,
    apiKey?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      petId: [petId, bigint()],
      apiKey: [apiKey, optional(string())],
    });
    req.header('api_key', mapped.apiKey);
    req.appendTemplatePath`/pet/${mapped.petId}`;
    req.throwOn(400, ApiError, 'Invalid ID supplied');
    req.throwOn(404, ApiError, 'Pet not found');
    return req.call(requestOptions);
  }
}
